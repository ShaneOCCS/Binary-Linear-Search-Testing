import java.security.SecureRandom;
import java.util.Arrays;

/**
 * CET - CS Academic Level 3
 * Description: This class provides implementations for iterative and recursive binary search
 * as well as linear search algorithms. It includes methods for generating a
 * random character array of uppercase and lowercase letters and allows searching
 * through this array for a specified character using different techniques.
 * Student Name: Shane O'Connell
 * Student Number: 041144343
 * Section #: 311
 * Course: CST8130 - Data Structures
 *
 * @author/Professor: James Mwangi PhD.
 */

public class BinaryLinearSearch {
    //Declarations
    private char[] charArray;
    private char searchKey;

    /**
     * Default constructor for BinaryLinearSearch Class.
     * Initializes array to empty and searchKey to '\0'.
     */
    public BinaryLinearSearch() {
        this.charArray = new char[0];
        this.searchKey = '\0';
    }

    /**
     * Setter for the character to search for.
     *
     * @param searchKey The character to be stored for searches.
     */
    public void setSearchKey(char searchKey) {
        this.searchKey = searchKey;
    }

    /**
     * Performs an iterative binary search on a given character array to find a specific key.
     * The method creates a sorted copy of the input array and searches within it to locate the key.
     *
     * @param charArray The input character array to search within.
     * @return The index of the stored searchKey if found, or -1 if not found.
     */
    public int iterativeBinarySearch(char[] charArray) {
        //Create a copy of the input array to avoid modifying the original array.
        char[] sortedArray = charArray.clone();
        //Sorts the array.
        Arrays.sort(sortedArray);

        //Search declarations.
        int low = 0;
        int high = sortedArray.length - 1;
        int result = -1; //Holds left-most match

        //Iterative Binary Search Loop.
        while (low <= high) {

            int mid = (low + high) / 2;

            if (sortedArray[mid] == this.searchKey) {
                result = mid;
                high = mid - 1;//Left search
            } else if (sortedArray[mid] < this.searchKey) {
                low = mid + 1;//Searches right half of the array.
            } else {
                high = mid - 1;//Searches left half of the array.
            }
        }

        return result; //Returns the first occurrence, or -1 if not found.
    }

    /**
     * Performs a recursive binary search to find a specific character in a sorted array.
     *
     * @param sortedArray The sorted array to search within.
     * @param low         The starting index of the range to search.
     * @param high        The ending index of the range to search.
     * @param searchKey   The character to search for.
     * @return The index of the searchKey if found, or -1 if not found.
     */
    public int recursiveBinarySearch(char[] sortedArray, int low, int high, char searchKey) {
        if (low <= high) {
            //Print the remaining elements in the current range.
            remainingElements(sortedArray, low, high);

            //Calculate the middle index of the current range.
            int mid = (low + high) / 2;

            //Check if the middle element is equal to the searchKey.
            if (sortedArray[mid] == searchKey) {
                return mid;
            } else if (sortedArray[mid] < searchKey) {
                //Search the right half.
                return recursiveBinarySearch(sortedArray, mid + 1, high, searchKey);
            } else {
                //Search the left half.
                return recursiveBinarySearch(sortedArray, low, mid - 1, searchKey);
            }
        }
        return -1; //Return if not found.
    }

    /**
     * Generates an array of 32 random characters, containing both uppercase and lowercase letters.
     * This method initializes the array with random letters and does not return any value.
     */
    public void generateRandomChars() {
        SecureRandom random = new SecureRandom();
        //Declaration.
        charArray = new char[32];

        //Loops through the size of the array and adds random chars (a-z & A-Z) to the array.
        for (int i = 0; i < charArray.length; i++) {
            //Use of ternary operator for uppercase and lowercase.
            charArray[i] = random.nextBoolean()
                    ? (char) ('A' + random.nextInt(26))
                    : (char) ('a' + random.nextInt(26));
        }
    }

    /**
     * Returns the unsorted character array generated by generateRandomChars().
     *
     * @return the internal unsorted char array.
     */
    public char[] getCharArray() {
        return charArray;
    }

    /**
     * Displays the elements of an array within a specified range.
     *
     * @param array The array containing the elements to display.
     * @param low   The starting index of the range.
     * @param high  The ending index of the range.
     */
    public void remainingElements(char[] array, int low, int high) {
        //Safety check.
        if (high >= array.length) {
            high = array.length - 1;
        }
        char[] remaining = Arrays.copyOfRange(array, low, high + 1);
        System.out.println(Arrays.toString(remaining));
    }

    /**
     * Performs an iterative linear search on the given character array for the stored searchKey.
     *
     * @param charArray The character array to search through.
     * @return The index of the stored searchKey if found, or -1 if not found.
     */
    public int iterativeLinearSearch(char[] charArray) {
        //Clone & sort for linear search.
        char[] sortedArray = charArray.clone();
        Arrays.sort(sortedArray);

        //Loop through each element in the sorted array.
        for (int i = 0; i < sortedArray.length; i++) {
            //Check if the current element matches the stored searchKey.
            if (sortedArray[i] == this.searchKey) {
                return i;
            }
        }
        return -1; //Return if not found.
    }

    /**
     * Performs a recursive linear search on the given character array for the given searchKey.
     *
     * @param charArray The character array to search through.
     * @param i         The current index being checked.
     * @param searchKey The character to search for.
     * @return The index (i) of the searchKey if found, or -1 if not found.
     */
    public int recursiveLinearSearch(char[] charArray, int i, char searchKey) {
        this.searchKey = searchKey;

        //Prints sorted array first.
        if (i == 0) {
            remainingElements(charArray, 0, charArray.length - 1);
        }
        //Checks array length.
        if (i < charArray.length) {
            //Check if the current element matches the stored searchKey.
            if (charArray[i] == this.searchKey) {
                //Prints key.
                remainingElements(charArray, i, charArray.length - 1);
                return i;
            }
            //Recursion.
            return recursiveLinearSearch(charArray, i + 1, searchKey);
        }

        return -1; //Return if not found.
    }
}